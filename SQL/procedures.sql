DROP PROCEDURE IF EXISTS ADD_TRANSMITTER_DATA;
DROP PROCEDURE IF EXISTS GET_TRANSMITTER_DATA;

delimiter //

CREATE PROCEDURE ADD_TRANSMITTER_DATA(pTRANSMITTER_ID INTEGER(7),
                                      pPASSWORD_CODE INTEGER(6),
                                      pDATA_TIME INTEGER,
                                      pRAW_VALUE INTEGER(6),
                                      pFILTERED_VALUE INTEGER(6),
                                      pDEX_BATTERY INTEGER(3),
                                      pPREV_TIME INTEGER,
                                      pBATTERY_PERC INTEGER(3),
                                      pBATTERY_MVOLT INTEGER(4),
                                      pCPU_TEMP INTEGER(4),
                                      pGEOLOCATION VARCHAR(21),
                                      pMAX_RECORDS INTEGER)

BEGIN
  DECLARE vDATA_INDEX INTEGER;
  DECLARE cMAX_RECORDS INTEGER ;

  SET cMAX_RECORDS = IFNULL(pMAX_RECORDS,1000);

  START TRANSACTION;
  SELECT CURRENT_INDEX INTO vDATA_INDEX FROM TRANSMITTER WHERE (TRANSMITTER_ID = pTRANSMITTER_ID) AND (PASSWORD_CODE = pPASSWORD_CODE);
  IF vDATA_INDEX IS NULL THEN
    SET vDATA_INDEX = 0;
    INSERT INTO TRANSMITTER (TRANSMITTER_ID,PASSWORD_CODE,CURRENT_INDEX) VALUES (pTRANSMITTER_ID,pPASSWORD_CODE,vDATA_INDEX);
  END IF;
  SET vDATA_INDEX = vDATA_INDEX + 1;
  UPDATE TRANSMITTER SET CURRENT_INDEX = vDATA_INDEX WHERE (TRANSMITTER_ID = pTRANSMITTER_ID) AND (PASSWORD_CODE = pPASSWORD_CODE);
  INSERT INTO TRANSMITTER_DATA (TRANSMITTER_ID,PASSWORD_CODE,DATA_INDEX,DATA_TIME,RAW_VALUE,FILTERED_VALUE,DEX_BATTERY,PREV_TIME,BATTERY_PERC,BATTERY_MVOLT,CPU_TEMP,GEOLOCATION)
    VALUES (pTRANSMITTER_ID,pPASSWORD_CODE,vDATA_INDEX,pDATA_TIME,pRAW_VALUE,pFILTERED_VALUE,pDEX_BATTERY,pPREV_TIME,pBATTERY_PERC,pBATTERY_MVOLT,pCPU_TEMP,pGEOLOCATION);
  DELETE FROM TRANSMITTER_DATA WHERE (TRANSMITTER_ID = pTRANSMITTER_ID) AND (PASSWORD_CODE = pPASSWORD_CODE) AND (DATA_INDEX < vDATA_INDEX - cMAX_RECORDS);
  COMMIT;
END //

CREATE PROCEDURE GET_TRANSMITTER_DATA(pTRANSMITTER_ID INTEGER(7),
                                      pPASSWORD_CODE INTEGER(6),
                                      pNUMBER_OF_RECORD INTEGER)
BEGIN
  DECLARE vDATA_INDEX INTEGER;

  SELECT CURRENT_INDEX INTO vDATA_INDEX FROM TRANSMITTER WHERE (TRANSMITTER_ID = pTRANSMITTER_ID) AND (PASSWORD_CODE = pPASSWORD_CODE);
  IF vDATA_INDEX IS NOT NULL THEN
    SELECT DATA_TIME,RAW_VALUE,FILTERED_VALUE,DEX_BATTERY,PREV_TIME,BATTERY_PERC,BATTERY_MVOLT,CPU_TEMP,GEOLOCATION
      FROM TRANSMITTER_DATA
      WHERE (TRANSMITTER_ID = pTRANSMITTER_ID) AND (PASSWORD_CODE = pPASSWORD_CODE) AND (DATA_INDEX > vDATA_INDEX - pNUMBER_OF_RECORD)
      ORDER BY DATA_INDEX DESC;
  END IF;
END //

delimiter ;
